x1 = c()
n = 20000
##Calcul de la loi
x = runif(n, min = 0, max = 1)
## esperance de la série
esp = mean(x)
## variance de la série
sigmacarre = mean(x^2) - esp^2
##Def de Sn
Sn = cumsum(x)
N = seq(1, n, by = 1)
##Def de Zn
Zn = (sqrt(N) / sqrt(sigmacarre)) * ((Sn / N) - esp)
plot(Zn,main = "Convergence de Zn avec une loi Uniforme")
x1 = c()
n = 20000
##Calcul de la loi
x = runif(n, min = 0, max = 1)
## esperance de la série
esp = mean(x)
## variance de la série
sigmacarre = mean(x^2) - esp^2
##Def de Sn
Sn = cumsum(x)
N = seq(1, n, by = 1)
##Def de Zn
Zn = (sqrt(N) / sqrt(sigmacarre)) * ((Sn / N) - esp)
plot(Zn,main = "Convergence de Zn avec une loi Uniforme")
x1 = c()
n = 20000
##Calcul de la loi
x = runif(n, min = 0, max = 1)
## esperance de la série
esp = mean(x)
## variance de la série
sigmacarre = mean(x^2) - esp^2
##Def de Sn
Sn = cumsum(x)
N = seq(1, n, by = 1)
##Def de Zn
Zn = (sqrt(N) / sqrt(sigmacarre)) * ((Sn / N) - esp)
plot(Zn,main = "Convergence de Zn avec une loi Uniforme")
x1 = c()
n = 20000
##Calcul de la loi
x = runif(n, min = 0, max = 1)
## esperance de la série
esp = mean(x)
## variance de la série
sigmacarre = mean(x^2) - esp^2
##Def de Sn
Sn = cumsum(x)
N = seq(1, n, by = 1)
##Def de Zn
Zn = (sqrt(N) / sqrt(sigmacarre)) * ((Sn / N) - esp)
plot(Zn,main = "Convergence de Zn avec une loi Uniforme")
## f(x) correspond a une loi normale de paramètres N(μ,ø²)
x1 = c()
##esperance
esp = 1 / 2
##variance
sigmacarre = 1 / 12
n = 20000
tries = 100
#calcul loi uniforme
fsimu1 = function(echantillon) {
for (i in 1:echantillon) {
w = runif(1)
x1[i] = qunif(w)
}
x1
}
# on a effectué la simulation de la v.a.r. de densité f(x) sur n
SumZn = c()
for (j in 1:n) {
Sn = fsimu1(tries)
tmpZn = (sqrt(tries) / sqrt(sigmacarre)) * ((sum(Sn) / tries) - esp)
SumZn[j] = tmpZn
}
hist(SumZn,ylab = "Frequence", xlab = "Zn",main = "Zn sur 20000 test de
taille N = 100 pour la loi Uniforme", breaks = 30,col =
"red",probability = TRUE)
loiNormale <- seq(-5, 5, by = 0.01) # tracé de la loi normale
y <- dnorm(loiNormale)
lines(loiNormale, y, col = "blue")
## f(x) correspond a une loi normale de paramètres N(μ,ø²)
x1 = c()
##esperance
esp = 1 / 2
##variance
sigmacarre = 1 / 12
n = 20000
tries = 100
#calcul loi uniforme
fsimu1 = function(echantillon) {
for (i in 1:echantillon) {
w = runif(1)
x1[i] = qunif(w)
}
x1
}
# on a effectué la simulation de la v.a.r. de densité f(x) sur n
SumZn = c()
for (j in 1:n) {
Sn = fsimu1(tries)
tmpZn = (sqrt(tries) / sqrt(sigmacarre)) * ((sum(Sn) / tries) - esp)
SumZn[j] = tmpZn
}
hist(SumZn,ylab = "Frequence", xlab = "Zn",main = "Zn sur 20000 test de
taille N = 100 pour la loi Uniforme", breaks = 30,col =
"red",probability = TRUE)
loiNormale <- seq(-5, 5, by = 0.01) # tracé de la loi normale
y <- dnorm(loiNormale)
lines(loiNormale, y, col = "blue")
## f(x) correspond a une loi normale de paramètres N(μ,ø²)
x1 = c()
##esperance
esp = 1 / 2
##variance
sigmacarre = 1 / 12
n = 20000
tries = 100
#calcul loi uniforme
fsimu1 = function(echantillon) {
for (i in 1:echantillon) {
w = runif(1)
x1[i] = qunif(w)
}
x1
}
# on a effectué la simulation de la v.a.r. de densité f(x) sur n
SumZn = c()
for (j in 1:n) {
Sn = fsimu1(tries)
tmpZn = (sqrt(tries) / sqrt(sigmacarre)) * ((sum(Sn) / tries) - esp)
SumZn[j] = tmpZn
}
hist(SumZn,ylab = "Frequence", xlab = "Zn",main = "Zn sur 20000 test de
taille N = 100 pour la loi Uniforme", breaks = 30,col =
"red",probability = TRUE)
loiNormale <- seq(-5, 5, by = 0.01) # tracé de la loi normale
y <- dnorm(loiNormale)
lines(loiNormale, y, col = "blue")
## f(x) correspond a une loi normale de paramètres N(μ,ø²)
x1 = c()
##esperance
esp = 1 / 2
##variance
sigmacarre = 1 / 12
n = 20000
tries = 100
#calcul loi uniforme
fsimu1 = function(echantillon) {
for (i in 1:echantillon) {
w = runif(1)
x1[i] = qunif(w)
}
x1
}
# on a effectué la simulation de la v.a.r. de densité f(x) sur n
SumZn = c()
for (j in 1:n) {
Sn = fsimu1(tries)
tmpZn = (sqrt(tries) / sqrt(sigmacarre)) * ((sum(Sn) / tries) - esp)
SumZn[j] = tmpZn
}
hist(SumZn,ylab = "Frequence", xlab = "Zn",main = "Zn sur 20000 test de
taille N = 100 pour la loi Uniforme", breaks = 30,col =
"red",probability = TRUE)
loiNormale <- seq(-5, 5, by = 0.01) # tracé de la loi normale
y <- dnorm(loiNormale)
lines(loiNormale, y, col = "blue")
x1 = c()
n = 20000
##Calcul de la loi
x = rexp(n)
##Esperance de la série
esp = mean(x)
##Variance
sigmacarre = (1 / (1/esp)^2)
Sn = cumsum(x)
N = seq(1, n, by = 1)
Zn = (sqrt(N) / sqrt(sigmacarre)) * ((Sn / N) - esp)
plot(Zn,main = "Convergence de Zn avec une loi Exponentielle")
x2 = c()
lambda = 0.5
##Variance
sigmacarre = 1 / (lambda ^ 2)
##Esperance
esp = 1 / lambda
tries = 100
#calcul loi expo
fsimu2 = function(echantillon) {
for (i in 1:echantillon) {
w = runif(1)
x2[i] = qexp(w,lambda)
}
x2
}
SumZn = c()
for (j in 1:n) {
Sn = fsimu2(tries)
tmpZn = (sqrt(tries) / sqrt(sigmacarre)) * ((sum(Sn) / tries) - esp)
SumZn[j] = tmpZn
}
hist(SumZn,ylab = "Frequence", xlab = "Zn",main = "Simulation Zn sur
20000 tests de taille N = 100 pour la loi Exponentielle", breaks =
30,col = "red",probability = TRUE)
# tracé de la loi normale
loiNormale <- seq(-5, 5, by = 0.01)
y <- dnorm(loiNormale)
lines(loiNormale, y, col = "blue")
n=5000
Xn= c() # Suite de VAR Xn
Yn= c() #Suite de VAR Yn
for (i in 1:n) {
U=runif(1) #Variable aléatoire U
R= sqrt(-2*log(U)) #valeur de R
V=runif(1) #Variable aléatoire V
teta=2*pi*V
X= R*cos(teta)
Y=R*sin(teta)
Xn[i]=X
Yn[i]=Y
}
#loi normale
normale=rnorm(n)
sortie=c(Xn, Yn, normale)
traceLoiNormale <- seq(-4,4,by=0.05)
y<-dnorm(traceLoiNormale, mean=0, sd=1)
#representation histogramme
hist(sortie, main="histogramme de la densité", ylab= "Densité", xlab=
"Valeurs", probability = TRUE)
#representation fonction gaussienne
lines(traceLoiNormale, y, col="red")
setwd("~/Cours/ING2/Introduction_IA/Neural_network/Ex4")
NN=nnet(Y~X1+X2+…,data=datatrain,size=2,decay=0.1,…)
library(nnet)
library(NeuralNetTools)
# Get data
data(iris)
summary(iris)
View(iris)
n=nrow(iris) # dataset size
ntrain=floor(2*n/3) # learning base size
ntest=n-ntrain # test base size
index=sample(1:n,ntrain,replace=F) # draw without discount
train=iris[index,] # learning base
test=iris[-index,] # test base
summary(train)
View(train)
View(test)
# Center and Reduce
mean=apply(train[,1:4],2,mean) # average over the columns of the quantitative variables
deviation=apply(train[,1:4],2,sd) # idem for deviation
tmp=scale(train[,1:4],center=mean,scale=deviation)
train[,1:4]=tmp
modele=nnet(Species~.,data=train,size=5)
model=nnet(Species~.,data=train,size=5)
model=nnet(Species~.,data=train,size=5)
View(model)
summary(model)
plotnet(model)
weights=modele$wts
temp=scale(test[,1:4],center=mean,scale=deviation)
apply(temp,2,mean)
apply(temp,2,sd)
test[,1:4]=temp
predict(modele,test)
# give predicted class
prev=predict(modele,test,type='class')
MatConf=table(test$Species,prev)
MatConf
tb=sum(diag(MatConf))/sum(MatConf)
tb
# Rate of right classed  per class
diag(MatConf)/apply(MatConf,1,sum)
library(nnet)
# Get data
data(iris)
summary(iris)
# Learning and test bases
n=nrow(iris) # dataset size
ntrain=floor(2*n/3) # learning base size
ntest=n-ntrain # test base size
index=sample(1:n,ntrain,replace=F) # draw without discount
train=iris[index,] # learning base
test=iris[-index,] # test base
summary(train)
# Center and Reduce
mean=apply(train[,1:4],2,mean) # average over the columns of the quantitative variables
deviation=apply(train[,1:4],2,sd) # idem for deviation
tmp=scale(train[,1:4],center=mean,scale=deviation)
train[,1:4]=tmp
#Train the neural network
model=nnet(Species~.,data=train,size=5)
#model=nnet(Species~.,data=train,size=2)
weights=modele$wts
plotnet(model)
# black= positive
# grey = negative
# big line = important in absolu value
summary(model)
# test base transformation
temp=scale(test[,1:4],center=mean,scale=deviation)
apply(temp,2,mean)
apply(temp,2,sd)
test[,1:4]=temp
# give probability for each class
predict(modele,test)
# give predicted class
prev=predict(modele,test,type='class')
MatConf=table(test$Species,prev)
MatConf
# Rate of right classed
tb=sum(diag(MatConf))/sum(MatConf)
tb
# Rate of right classed  per class
diag(MatConf)/apply(MatConf,1,sum)
plotnet(model)
library(NeuralNetTools)
plotnet(model)
